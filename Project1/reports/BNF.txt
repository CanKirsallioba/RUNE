1) Program Definition

<program> ::= <statement_list>

<statement_list> ::= <statement>
                    | <statement_list> <statement>

<statement> ::= COMMENT
               | <expression>; 
               | <loop>
               | <conditional>
               | <function_definition>
                   
<void_return_statement> ::= RETURN;
<return_statement> ::= RETURN <expression>;

<form> ::= <identifier> <form> 
          | <identifier>

<char> ::= <letter>
          | <digit>

<letter> ::= <lowercase_letter>
            | <uppercase_letter>

<lowercase_letter> ::= a | b | c ... | z
<uppercase_letter> ::= A | B | C ... | Z


2) Types and Constants

<digit> ::= 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9

<integer> ::= <sign> <int> 
             | <int>

<int> ::= <int> <digit> 
         | <digit>

<float> ::= <sign> <fl> 
           | <fl>     

<fl> ::= <int> DOT <int> 
        | DOT <int>          

<boolean> ::= TRUE | FALSE

<data_type> ::= INT_TYPE
               | FLOAT_TYPE
               | CHAR_TYPE
               | BOOLEAN_TYPE

<identifier> ::= <letter> 
                | <identifier> <char>


3) Loop Definition

<loop> ::= <while_loop> 
          | <for_loop>

<while_loop> ::= WHILE LP <logical_expression> RP LCB <statement_list> RCB
<for_loop> ::= FOR LP <for_loop_expression> RP LCB <statement_list> RCB
<for_loop_expression> ::= <expression> ; <boolean>; <expression>


4) Conditional Definition

<conditional> ::= <if>
<if> ::= IF LP <logical_expression> RP LCB <statement_list> RCB <else> 
        | IF LP <logical_expression> RP LCB <statement_list> RCB
<else> ::= ELSE LCB <statement_list> RCB


5) Expressions

<expression> ::= <expr> PLUS <expression2>
                | <expression> MINUS <expression2>
                | <expression2>

<expression2> ::= <expression2> MULTIPLICATION <expression3>
                 | <expression2> DIVISION <expression3>
                 | <expression3>

<expression3> ::= <expression4> EXPONENTIATION <expression3>
                 | <expression4>

<expression4> ::= LP <expression> RP
                 | <expr>
                 | <identifier>

<expr> ::= <int_expression> 
        | <float_expression> 
        | <function_expression> 
        | <logical_expression> 

<int_expression> ::= <integer>
<float_expression> ::= <float>
<function_expression> ::= <identifier> LP <argument_list> RP
<logical_expression> ::= <boolean> 
                        | (<integer> | <float> | <identifier>) (GREATER_THAN | SMALLER_THAN | GREATER_OR_EQUAL | SMALLER_OR_EQUAL) (<integer> | <float> | <identifier>)
                        | <logical_expression> AND <logical_expression>
                        | <logical_expression> OR <logical_expression>
                        | <logical_expression> EQUAL <logical_expression>
                        | <logical_expression> NOT_EQUAL <logical_expression>

<function_call> ::= <function_expression>;

<assignment> ::= <identifier> ASSIGNMENT_OPERATOR <expression>


6) Function Definition

<function_def> ::= <void_with_return>
                  | <void_without_return>
                  | <non_void_func_def>
                  | <only_return_func_def>
                        
<void_with_return> ::= VOID_TYPE <identifier> LP <argument_list> RP LCB <statement_list> <void_return_statement> RCB
<void_without_return> ::= VOID_TYPE <identifier> LP <argument_list> RP LCB <statement_list> RCB

<non_void_func_def> ::= <data_type> <identifier> LP <argument_list> RP LCB <statement_list> <return_statement> RCB
<only_return_func_def> ::= <data_type> <identifier> LP <argument_list> RP LCB <return_statement> RCB

<argument> ::= <integer> 
              | <float>
              | <char>
              | <boolean>
              | <identifier>
              | <function_expression>

<argument_list> ::= <argument>, <argument_list> 
                   | <argument> 
                   | empty


7) Input Output Definition

<input_statement> ::= SCAN LP <expression> RP;
<output_statement> ::= PRINT LP <expression> RP;


8) Drone Functions 

<read_inclination_function> ::= READ_INCLINATION LP RP;
<read_altitude_function> ::= READ_ALTITUDE LP RP;
<read_temperature_function> ::= READ_TEMPERATURE LP RP;
<read_acceleration_function> ::= READ_ACCELERATION LP RP;
<set_camera_state_function> ::= SET_CAMERA_STATE LP <boolean> RP;
<take_picture_function> ::= TAKE_PICTURE LP RP;
<read_timestamp_function> ::= READ_TIMESTAMP LP RP;
<connect_to_computer_function> ::= CONNECT_TO_COMPUTER LP RP;


9) Our Creative Functions

<do_flip_function> ::= DO_FLIP LP <char> RP;
<takeoff_function> ::= TAKEOFF LP RP;
<land_function> ::= LAND LP RP;
<emergency_function> ::= EMERGENCY LP <boolean> RP;
<up_function> ::= UP LP (<integer> | <float>);
<down_function> ::= DOWN LP (<integer> | <float>) RP;
<right_function> ::= RIGHT LP (<integer> | <float>) RP;
<left_function> ::= LEFT LP (<integer> | <float>) RP;
<forward_function> ::= FORWARD LP (<integer> | <float>) RP;
<backward_function> ::= BACKWARD LP (<integer> | <float>) RP;
<rotate_clockwise_function> ::= ROTATE_CLOCKWISE LP <boolean>, <integer> RP;
<set_speed_function> ::= SET_SPEED LP (<integer> | <float>) RP;
<get_speed_function> ::= GET_SPEED LP RP;
<get_battery_function> ::= GET_BATTERY LP RP; 