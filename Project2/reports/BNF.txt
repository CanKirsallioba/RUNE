1) Program Definition
<program> ::= <statement_list>
<statement_list> ::= <statement>
                                 | <statement_list> <statement>
<statement> ::= COMMENT
                          | <expression> SEMICOLON
                          | <loop>
                          | <if>
                          | <function_definition>            
2) Types and Constants
<data_type> ::= INT_TYPE
                          | FLOAT_TYPE
                          | CHAR_TYPE
                          | BOOLEAN_TYPE
3) Loop Definition
<loop> ::= <while_loop> 
                 | <for_loop>
<while_loop> ::= WHILE LP <logical_expression> RP LCB <statement_list> RCB
<for_loop> ::= FOR LP <for_loop_expression> RP LCB <statement_list> RCB
<for_loop_expression> ::= <expression> SEMICOLON BOOLEAN; <expression>

4) Conditional Definition
<if> ::= IF LP <logical_expression> RP LCB <statement_list> RCB <else> 
            | IF LP <logical_expression> RP LCB <statement_list> RCB
<else> ::= ELSE LCB <statement_list> RCB
5) Expressions
<expression> ::= <expression> PLUS <expression2>
                           | <expression> MINUS <expression2>
                           | <expression2>
<expression2> ::= <expression2> MULTIPLICATION <expression3>
                             | <expression2> DIVISION <expression3>
                             | <expression2> REMAINDER <expression3>
                             | <expression3>
<expression3> ::= <expression4> EXPONENTIATION <expression3>
                             | <expression4>
<expression4> ::= LP <expression> RP
                            | <expr>
<expr> ::= INT
                 | FLOAT 
                 | <function_call> 
                 | <logical_expression>
                 | IDENTIFIER
<function_call> ::= IDENTIFIER LP <argument_list> RP
<logical_expression> ::= BOOLEAN 
                                       | <comparison>
                                       | <basic_equality>
                                       | <function_call>
                                       | <logical_expression> AND <logical_expression>
                                       | <logical_expression> OR <logical_expression>
<basic_equality> ::= (INT | FLOAT | BOOLEAN | IDENTIFIER | <function_call>)
                                  (EQUAL | NOT_EQUAL) 
          (INT | FLOAT | BOOLEAN | IDENTIFIER | <function_call>)
<comparison> ::=  (INT | FLOAT | IDENTIFIER | <function_call>)  <comparison_operator> 
                               (INT | FLOAT | IDENTIFIER | <function_call>)
<comparison_operator> ::= GREATER_THAN 
                                            | SMALLER_THAN 
                                            | GREATER_OR_EQUAL 
                                            | SMALLER_OR_EQUAL
<assignment> ::= IDENTIFIER ASSIGNMENT_OPERATOR <expression>
                            | <data_type> IDENTIFIER ASSIGNMENT_OPERATOR <expression>
6) Function Definition
<function_def> ::= <void_with_return>
                              | <void_without_return>
                              | <non_void_func_def>
                              | <only_return_func_def>          
<void_with_return> ::= VOID_TYPE IDENTIFIER LP <argument_list> RP LCB     
                                         <statement_list> <void_return_statement> RCB
<void_without_return> ::= VOID_TYPE IDENTIFIER LP <argument_list> RP LCB 
                                              <statement_list> RCB
<non_void_func_def> ::= <data_type> IDENTIFIER LP <argument_list> RP LCB  
                                            <statement_list> <return_statement> RCB
<only_return_func_def> ::= <data_type> IDENTIFIER LP <argument_list> RP LCB 
                                                <return_statement> RCB
<void_return_statement> ::= RETURN SEMICOLON
<return_statement> ::= RETURN <expression> SEMICOLON
<argument> ::= INT
                         | FLOAT
                         | CHAR
                         | BOOLEAN
                         | IDENTIFIER
                         | <function_call>
<argument_list> ::= <argument> COMMA <argument_list> 
                                | <argument> 
                                | empty
7) Input Output Definition
<input_statement> ::= SCAN LP <expression> RP SEMICOLON
<output_statement> ::= PRINT LP <expression> RP SEMICOLON
8) Drone Functions 
<read_inclination_function> ::= READ_INCLINATION LP RP SEMICOLON
<read_altitude_function> ::= READ_ALTITUDE LP RP SEMICOLON
<read_temperature_function> ::= READ_TEMPERATURE LP RP SEMICOLON
<read_acceleration_function> ::= READ_ACCELERATION LP RP SEMICOLON
<set_camera_state_function> ::= SET_CAMERA_STATE LP BOOLEAN RP SEMICOLON
<take_picture_function> ::= TAKE_PICTURE LP RP SEMICOLON
<read_timestamp_function> ::= READ_TIMESTAMP LP RP SEMICOLON
<connect_to_computer_function> ::= CONNECT_TO_COMPUTER LP RP SEMICOLON
9) Our Extra Functions
<do_flip_function> ::= DO_FLIP LP CHAR RP SEMICOLON
<takeoff_function> ::= TAKEOFF LP RP SEMICOLON
<land_function> ::= LAND LP RP SEMICOLON
<emergency_function> ::= EMERGENCY LP BOOLEAN RP SEMICOLON
<up_function> ::= UP LP (INT | FLOAT) SEMICOLON
<down_function> ::= DOWN LP (INT | FLOAT) RP SEMICOLON
<right_function> ::= RIGHT LP (INT | FLOAT) RP SEMICOLON
<left_function> ::= LEFT LP (INT | FLOAT) RP SEMICOLON
<forward_function> ::= FORWARD LP (INT | FLOAT) RP SEMICOLON
<backward_function> ::= BACKWARD LP (INT | FLOAT) RP;
<rotate_clockwise_function> ::= ROTATE_CLOCKWISE LP BOOLEAN COMMA INT RP       
                                                    SEMICOLON
<set_speed_function> ::= SET_SPEED LP (INT | FLOAT) RP SEMICOLON
<get_speed_function> ::= GET_SPEED LP RP SEMICOLON
<get_battery_function> ::= GET_BATTERY LP RP SEMICOLON
