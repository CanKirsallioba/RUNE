$ This example program demonstrates the features of RUNE a drone programming language. $

$ The user defines a function so that he can check the drone's overall well being in mid air. $

boolean checkStats() {
    int inclination <- readInclination();
    int temperature <- readTemperature();

    if (inclination >= 10) {
        int altitude <- readAltitude();
        $ TRUE indicates the system is functioning normally. $
        $ FALSE indicates the system is not functioning normally. $
        if (altitude <= 60) {
            return FALSE ;
        } else { 
            if (temperature <= 10) {
                return TRUE;
            } else {
                return FALSE;
            }
        }
    } else {
        return FALSE;
    }
    return FALSE;
}


$ User defines a function to take multiple pictures. $ 

void takeMultiplePictures(int count) {
    turnOnCamera();

    for (int i <- 0; i < numberOfPictures; i <- i + 1) {
        takePicture();
    }

    turnOffCamera();
}

$ The user connects the drone to the computer. $

connectToComputer();


$ The user takes off. $

takeoff();


$ The user checks the altitude and the temperature, if the altitude is 60 meters and the temperature is less than or equal to 35 degrees or not. $ 
$ If the altitude is 60 meters and the temperature is less than or equal to 35 degrees the user turns on the camera, takes the photo, then turns of the camera. $
$ The user lets his friend determine the number of pictures to be taken. $

if (readAltitude() == 60 && readTemperature() <= 35) {
    int numberOfPictures <- scan();
    takeMultiplePictures(numberOfPictures);
}


$ The user checks stats and according to the stats the drone takes pictures or reads current timestamp. $

if (checkStats()) {
    turnOnCamera();
    while (getFlightTime() <= 300) {
        if (getFlightTime() % 4 == 0) {
            takePicture();
        }
    }
    turnOffCamera();
} else {
    print(readTimestamp());
}


$ The user lands the drone $

land();
